# Instalação de pacotes
!pip install gdown

# Importação de pacotes
import gdown
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, ellip, freqz, tf2zpk, filtfilt
from numpy.fft import fft, fftfreq
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score
from collections import Counter
import pydotplus
from six import StringIO
from IPython.display import Image

# Download dos dados
url = 'https://drive.google.com/uc?id=1BIvaGB8cq72hsSdldi7LiNsuv0A7FkPg'
gdown.download(url, 'DogMoveData.csv', quiet=False)
df = pd.read_csv('DogMoveData.csv')

# Cálculo das normas euclidianas do acelerômetro e giroscópio
df['AccelMag'] = np.linalg.norm(df[['ANeck_x', 'ANeck_y', 'ANeck_z']], axis=1)
df['GyroMag'] = np.linalg.norm(df[['GNeck_x', 'GNeck_y', 'GNeck_z']], axis=1)

# Visualização das normas
time_data = df[['t_sec', 'AccelMag', 'GyroMag']].iloc[:200]
plt.title("AccelMag x t_sec")
plt.plot(time_data["t_sec"], time_data["AccelMag"])
plt.show()
plt.title("GyroMag x t_sec")
plt.plot(time_data["t_sec"], time_data["GyroMag"])
plt.show()

# Função para plotar resposta dos filtros
def plot_filter_response(filter_type, cutoff, fs, order=5, transition_width=0.01):
    if filter_type == 'ellip':
        b, a = ellip(order, 0.1, 40, cutoff/(0.5*fs), btype='highpass')
    else:
        b, a = butter(order, cutoff/(0.5*fs), btype='lowpass')
    w, h = freqz(b, a)
    frequencies = (fs * 0.5 / np.pi) * w
    plt.plot(frequencies, abs(h), label=f'Filtro {filter_type.capitalize()}')
    plt.axvline(x=cutoff, color='red', linestyle='--')
    plt.title(f'Resposta em Frequência - Filtro {filter_type.capitalize()}')
    plt.xlabel('Frequência (Hz)')
    plt.grid(True)
    plt.legend()
    plt.show()

# Visualização dos filtros
plot_filter_response('butter', cutoff=10, fs=100)
plot_filter_response('ellip', cutoff=0.5, fs=100)

# Funções de filtros
def highpass(data, cutoff=0.5, fs=100, order=5):
    b, a = ellip(order, 0.1, 40, cutoff/(0.5*fs), btype='highpass')
    return filtfilt(b, a, data)

def lowpass(data, cutoff=10, fs=100, order=5):
    b, a = butter(order, cutoff/(0.5*fs), btype='lowpass')
    return filtfilt(b, a, data)

# Aplicação dos filtros nas normas calculadas
for dog_id in df['DogID'].unique():
    dog_data = df[df['DogID'] == dog_id]
    df.loc[dog_data.index, 'FilteredAccelMag'] = lowpass(highpass(dog_data['AccelMag']))
    df.loc[dog_data.index, 'FilteredGyroMag'] = lowpass(highpass(dog_data['GyroMag']))

# Visualização das normas filtradas
filtered_data = df[['t_sec', 'FilteredAccelMag', 'FilteredGyroMag']].iloc[:200]
fig, axs = plt.subplots(2, 2, figsize=(12, 8))
fig.suptitle('Comparação antes (azul) e após filtros (verde)')
axs[0, 0].plot(time_data['t_sec'], time_data['AccelMag'], 'tab:blue')
axs[0, 1].plot(filtered_data['t_sec'], filtered_data['FilteredAccelMag'], 'tab:green')
axs[1, 0].plot(time_data['t_sec'], time_data['GyroMag'], 'tab:blue')
axs[1, 1].plot(filtered_data['t_sec'], filtered_data['FilteredGyroMag'], 'tab:green')
plt.show()

# FFT para visualização em frequência
for col in ['FilteredAccelMag', 'FilteredGyroMag']:
    signal_fft = fft(filtered_data[col])[:len(filtered_data[col]) // 2]
    freqs = fftfreq(len(filtered_data[col]))[:len(filtered_data[col]) // 2]
    plt.stem(freqs, np.abs(signal_fft))
    plt.title(f'{col} x Frequência')
    plt.xlabel('Frequência (Hz)')
    plt.ylabel(col)
    plt.show()

# Funções de extração de características
def calc_energy(signal): return np.sum(signal ** 2)
def calc_peak_freq(signal): return fftfreq(len(signal))[np.argmax(np.abs(fft(signal)))]
def mean_crossing(signal):
    mean = np.mean(signal)
    return len(np.where(np.diff((signal > mean).astype(int)) != 0)[0])

# Extração de características para janelas
window_size, overlap = 200, 0.5
features = {'DogID': [], 'Energy_A': [], 'Energy_G': [], 'Peak_A': [], 'Peak_G': [], 'CrossMean_A': [], 'CrossMean_G': [], 'Behavior': []}

def windowing(data, window_size, overlap=0.5):
    step = int(window_size * (1 - overlap))
    for i in range(0, len(data) - window_size + 1, step):
        yield data[i:i + window_size]

for dog_id in df['DogID'].unique():
    dog_data = df[df['DogID'] == dog_id]
    accel_windows = list(windowing(dog_data['FilteredAccelMag'].values, window_size, overlap))
    gyro_windows = list(windowing(dog_data['FilteredGyroMag'].values, window_size, overlap))

    for acc_win, gyro_win in zip(accel_windows, gyro_windows):
        features['DogID'].append(dog_id)
        features['Energy_A'].append(calc_energy(acc_win))
        features['Energy_G'].append(calc_energy(gyro_win))
        features['Peak_A'].append(calc_peak_freq(acc_win))
        features['Peak_G'].append(calc_peak_freq(gyro_win))
        features['CrossMean_A'].append(mean_crossing(acc_win))
        features['CrossMean_G'].append(mean_crossing(gyro_win))

features_df = pd.DataFrame(features)

# Histogramas das características
fig, axs = plt.subplots(2, 3, figsize=(12, 8))
fig.suptitle('Distribuição das Características')
for i, col in enumerate(['Energy_A', 'Peak_A', 'CrossMean_A', 'Energy_G', 'Peak_G', 'CrossMean_G']):
    axs[i // 3, i % 3].hist(features_df[col], bins=30)
    axs[i // 3, i % 3].set_title(col)
plt.tight_layout()
plt.show()

# Preparação dos dados de classificação
df_clf = features_df.copy()
df_clf.replace({'Galloping': 1, 'Standing': 2, 'Walking': 3}, inplace=True)

# Modelo de classificação Leave-One-Out Cross-Validation
metrics = []
for dog_id in df_clf['DogID'].unique():
    train_data = df_clf[df_clf['DogID'] != dog_id]
    test_data = df_clf[df_clf['DogID'] == dog_id]
    X_train, y_train = train_data.iloc[:, 1:-1], train_data['Behavior']
    X_test, y_test = test_data.iloc[:, 1:-1], test_data['Behavior']

    clf = DecisionTreeClassifier(max_depth=5)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    metrics.append({
        'DogID': dog_id,
        'Accuracy': accuracy_score(y_test, y_pred),
        'ConfusionMatrix': confusion_matrix(y_test, y_pred, labels=[1, 2, 3]),
        'Precision': precision_score(y_test, y_pred, average=None),
        'Recall': recall_score(y_test, y_pred, average=None),
        'F1Score': f1_score(y_test, y_pred, average=None)
    })

# Resultados da classificação
metrics_df = pd.DataFrame(metrics)

# Boxplots das métricas de performance
for metric in ['Precision', 'Recall', 'F1Score']:
    metric_values = np.array([scores for scores in metrics_df[metric] for scores in scores])
    plt.boxplot([metric_values[i::3] for i in range(3)], labels=['Galloping', 'Standing', 'Walking'])
    plt.title(f'{metric} por Classe')
    plt.ylabel(metric)
    plt.show()

# Visualização da árvore de decisão
dot_data = StringIO()
export_graphviz(clf, out_file=dot_data, filled=True, rounded=True, feature_names=X_train.columns)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

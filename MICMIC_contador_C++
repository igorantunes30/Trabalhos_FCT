/*
 * igorlino.c
 *
 * Created: 13/09/2024 15:37:33
 * Author : igorAntunes
 */ 

#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>


#define BAUD 2400
#define MYUBRR F_CPU/16/BAUD-1

// Mapeamento dos números hexadecimais para o display de 7 segmentos
uint8_t segment_map[16] = {
	0b11000000, // 0
	0b11111001, // 1
	0b10100100, // 2
	0b10110000, // 3
	0b10011001, // 4
	0b10010010, // 5
	0b10000010, // 6
	0b11111000, // 7
	0b10000000, // 8
	0b10010000, // 9
	0b10001000, // A
	0b10000011, // B
	0b11000110, // C
	0b10100001, // D
	0b10000110, // E
	0b10001110  // F
};

// Variáveis globais
volatile uint8_t counter = 0;
volatile uint8_t direction = 1;
volatile uint8_t paused = 0;
volatile uint16_t speed_delay = 500; // Começa com velocidade média

void uart_init(unsigned int ubrr) {
	// Configura a taxa de baud
	UBRR0H = (unsigned char)(ubrr>>8);
	UBRR0L = (unsigned char)ubrr;
	// Habilita recepção e interrupção de recepção
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0);
	// Modo assíncrono, 8 bits de dados, 1 bit de parada
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
}

void display_number(uint8_t num) {
	PORTB = segment_map[num & 0x0F];
}

void uart_transmit(unsigned char data) {
	// Espera o buffer de transmissão estar vazio
	while (!(UCSR0A & (1<<UDRE0)));
	// Envia o dado
	UDR0 = data;
}

ISR(USART_RX_vect) {
	// Recebe o dado da UART
	unsigned char received = UDR0;

	switch(received) {
		case 'A':
		case 'a':
		speed_delay = 100; // Contagem rápida
		break;
		case 'B':
		case 'b':
		speed_delay = 500; // Contagem média
		break;
		case 'C':
		case 'c':
		speed_delay = 1000; // Contagem lenta
		break;
		default:
		direction = !direction; // Inverter direção
		break;
	}
}

void init_io() {
	// Configura a porta B como saída para o display de 7 segmentos
	DDRB = 0xFF;
	// Configura o botão como entrada
	DDRD &= ~(1 << PD2);
	// Habilita pull-up no botão
	PORTD |= (1 << PD2);
}

void check_button() {
	if (!(PIND & (1 << PD2))) { // Botão pressionado
		_delay_ms(50); // Debounce
		paused = !paused; // Alterna entre pausado e rodando
		while (!(PIND & (1 << PD2))); // Espera o botão ser solto
	}
}

void delay_custom(uint16_t delay) {
	// Implementação de delay manual
	while (delay--) {
		_delay_ms(1); // Atraso de 1 ms repetido
	}
}

int main(void) {
	// Inicializa UART e I/O
	uart_init(MYUBRR);
	init_io();
	sei(); // Habilita interrupções globais

	while (1) {
		check_button();
		if (!paused) {
			display_number(counter);

			if (direction) {
				counter = (counter + 1) & 0x0F; // Incrementa (0-15)
				} else {
				counter = (counter - 1) & 0x0F; // Decrementa (0-15)
			}

			delay_custom(speed_delay);
		}
	}
}
